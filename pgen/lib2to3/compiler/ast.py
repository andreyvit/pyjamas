# abstract syntax node definitions
# 
# This file is automatically generated by pgen/astgen.py

OP_ASSIGN = 'OP_ASSIGN';
OP_DELETE = 'OP_DELETE';
OP_APPLY = 'OP_APPLY';

SC_LOCAL = 1;
SC_GLOBAL = 2;
SC_FREE = 3;
SC_CELL = 4;
SC_UNKNOWN = 5;

CO_OPTIMIZED = 0x0001;
CO_NEWLOCALS = 0x0002;
CO_VARARGS = 0x0004;
CO_VARKEYWORDS = 0x0008;
CO_NESTED = 0x0010;
CO_GENERATOR = 0x0020;
CO_GENERATOR_ALLOWED = 0;
CO_FUTURE_DIVISION = 0x2000;
CO_FUTURE_ABSIMPORT = 0x4000;
CO_FUTURE_WITH_STATEMENT = 0x8000;
CO_FUTURE_PRINT_FUNCTION = 0x10000;

def flatten(seq):
    l = []
    for i in range(len(seq)):
        if len(seq[i]) > 0:
            subf = flatten(seq[i])
            l += subf
        else:
            l.append(seq[i])
    return l

#"""

# --------------------------------------------------------
class Add:

    def __init__ (self, left, right, lineno):

        self.nodeName = "Add";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class And:

    def __init__ (self, nodes, lineno):

        self.nodeName = "And";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class AssAttr:

    def __init__ (self, expr, attrname, flags, lineno):

        self.nodeName = "AssAttr";
        self.expr = expr;
        self.attrname = attrname;
        self.flags = flags;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        ret = handler.visit(self.attrname, args);
        if ret: self.attrname = ret
        ret = handler.visit(self.flags, args);
        if ret: self.flags = ret


# --------------------------------------------------------
class AssList:

    def __init__ (self, nodes, lineno):

        self.nodeName = "AssList";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class AssName:

    def __init__ (self, name, flags, lineno):

        self.nodeName = "AssName";
        self.name = name;
        self.flags = flags;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.name, args);
        if ret: self.name = ret
        ret = handler.visit(self.flags, args);
        if ret: self.flags = ret


# --------------------------------------------------------
class AssTuple:

    def __init__ (self, nodes, lineno):

        self.nodeName = "AssTuple";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Assert:

    def __init__ (self, test, fail, lineno):

        self.nodeName = "Assert";
        self.test = test;
        self.fail = fail;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.test, args);
        if ret: self.test = ret
        ret = handler.visit(self.fail, args);
        if ret: self.fail = ret


# --------------------------------------------------------
class Assign:

    def __init__ (self, nodes, expr, lineno):

        self.nodeName = "Assign";
        self.nodes = nodes;
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret

        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class AugAssign:

    def __init__ (self, node, op, expr, lineno):

        self.nodeName = "AugAssign";
        self.node = node;
        self.op = op;
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.node, args);
        if ret: self.node = ret
        ret = handler.visit(self.op, args);
        if ret: self.op = ret
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class Backquote:

    def __init__ (self, expr, lineno):

        self.nodeName = "Backquote";
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class Bitand:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Bitand";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Bitor:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Bitor";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Bitxor:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Bitxor";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Break_:

    def __init__(self, lineno):

        self.nodeName = "Break_";
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        return;


# --------------------------------------------------------
class CallFunc:

    def __init__ (self, node, args, star_args, dstar_args, lineno):

        self.nodeName = "CallFunc";
        self.node = node;
        self.args = args;
        self.star_args = star_args;
        self.dstar_args = dstar_args;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.node, args);
        if ret: self.node = ret
        for i_args in range(len(self.args)):

            ret = handler.visit(self.args[i_args], args);
            if ret: self.args[i_args] = ret

        ret = handler.visit(self.star_args, args);
        if ret: self.star_args = ret
        ret = handler.visit(self.dstar_args, args);
        if ret: self.dstar_args = ret


# --------------------------------------------------------
class Class_:

    def __init__ (self, name, bases, doc, code, decorators, lineno):

        self.nodeName = "Class_";
        self.name = name;
        self.bases = bases;
        self.doc = doc;
        self.code = code;
        self.decorators = decorators;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.name, args);
        if ret: self.name = ret
        for i_bases in range(len(self.bases)):

            ret = handler.visit(self.bases[i_bases], args);
            if ret: self.bases[i_bases] = ret

        ret = handler.visit(self.doc, args);
        if ret: self.doc = ret
        ret = handler.visit(self.code, args);
        if ret: self.code = ret
        ret = handler.visit(self.decorators, args);
        if ret: self.decorators = ret


# --------------------------------------------------------
class Compare:

    def __init__ (self, expr, ops, lineno):

        self.nodeName = "Compare";
        self.expr = expr;
        self.ops = ops;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        for i_ops in range(len(self.ops)):

            ret = handler.visit(self.ops[i_ops], args);
            if ret: self.ops[i_ops] = ret



# --------------------------------------------------------
class Const_:

    def __init__ (self, value, lineno):

        self.nodeName = "Const_";
        self.value = value;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.value, args);
        if ret: self.value = ret


# --------------------------------------------------------
class Continue_:

    def __init__(self, lineno):

        self.nodeName = "Continue_";
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        return;


# --------------------------------------------------------
class Decorators:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Decorators";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Dict:

    def __init__ (self, items, lineno):

        self.nodeName = "Dict";
        self.items = items;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_items in range(len(self.items)):

            ret = handler.visit(self.items[i_items], args);
            if ret: self.items[i_items] = ret



# --------------------------------------------------------
class Discard:

    def __init__ (self, expr, lineno):

        self.nodeName = "Discard";
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class Div:

    def __init__ (self, left, right, lineno):

        self.nodeName = "Div";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class Ellipsis:

    def __init__(self, lineno):

        self.nodeName = "Ellipsis";
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        return;


# --------------------------------------------------------
class Exec:

    def __init__ (self, expr, locals, globals, lineno):

        self.nodeName = "Exec";
        self.expr = expr;
        self.locals = locals;
        self.globals = globals;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        ret = handler.visit(self.locals, args);
        if ret: self.locals = ret
        ret = handler.visit(self.globals, args);
        if ret: self.globals = ret


# --------------------------------------------------------
class FloorDiv:

    def __init__ (self, left, right, lineno):

        self.nodeName = "FloorDiv";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class For_:

    def __init__ (self, assign, list, body, else_, lineno):

        self.nodeName = "For_";
        self.assign = assign;
        self.list = list;
        self.body = body;
        self.else_ = else_;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.assign, args);
        if ret: self.assign = ret
        ret = handler.visit(self.list, args);
        if ret: self.list = ret
        ret = handler.visit(self.body, args);
        if ret: self.body = ret
        ret = handler.visit(self.else_, args);
        if ret: self.else_ = ret


# --------------------------------------------------------
class From:

    def __init__ (self, modname, names, level, lineno):

        self.nodeName = "From";
        self.modname = modname;
        self.names = names;
        self.level = level;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.modname, args);
        if ret: self.modname = ret
        ret = handler.visit(self.names, args);
        if ret: self.names = ret
        ret = handler.visit(self.level, args);
        if ret: self.level = ret


# --------------------------------------------------------
class Function_:

    def __init__ (self, decorators, name, argnames, defaults, varargs, kwargs, doc, code, lineno):

        self.nodeName = "Function_";
        self.decorators = decorators;
        self.name = name;
        self.argnames = argnames;
        self.defaults = defaults;
        self.varargs = varargs;
        self.kwargs = kwargs;
        self.doc = doc;
        self.code = code;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.decorators, args);
        if ret: self.decorators = ret
        ret = handler.visit(self.name, args);
        if ret: self.name = ret
        ret = handler.visit(self.argnames, args);
        if ret: self.argnames = ret
        for i_defaults in range(len(self.defaults)):

            ret = handler.visit(self.defaults[i_defaults], args);
            if ret: self.defaults[i_defaults] = ret

        ret = handler.visit(self.varargs, args);
        if ret: self.varargs = ret
        ret = handler.visit(self.kwargs, args);
        if ret: self.kwargs = ret
        ret = handler.visit(self.doc, args);
        if ret: self.doc = ret
        ret = handler.visit(self.code, args);
        if ret: self.code = ret


# --------------------------------------------------------
class GenExpr:

    def __init__ (self, code, lineno):

        self.nodeName = "GenExpr";
        self.code = code;
        self.lineno = lineno;
        self.argnames = ['.0']
        self.varargs = self.kwargs = None


    def walkChildren(self, handler, args):
        ret = handler.visit(self.code, args);
        if ret: self.code = ret


# --------------------------------------------------------
class GenExprFor:

    def __init__ (self, assign, iter, ifs, lineno):

        self.nodeName = "GenExprFor";
        self.assign = assign;
        self.iter = iter;
        self.ifs = ifs;
        self.lineno = lineno;
        self.is_outmost = False

    def walkChildren(self, handler, args):
        ret = handler.visit(self.assign, args);
        if ret: self.assign = ret
        ret = handler.visit(self.iter, args);
        if ret: self.iter = ret
        for i_ifs in range(len(self.ifs)):

            ret = handler.visit(self.ifs[i_ifs], args);
            if ret: self.ifs[i_ifs] = ret



# --------------------------------------------------------
class GenExprIf:

    def __init__ (self, test, lineno):

        self.nodeName = "GenExprIf";
        self.test = test;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.test, args);
        if ret: self.test = ret


# --------------------------------------------------------
class GenExprInner:

    def __init__ (self, expr, quals, lineno):

        self.nodeName = "GenExprInner";
        self.expr = expr;
        self.quals = quals;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        for i_quals in range(len(self.quals)):

            ret = handler.visit(self.quals[i_quals], args);
            if ret: self.quals[i_quals] = ret



# --------------------------------------------------------
class Getattr:

    def __init__ (self, expr, attrname, lineno):

        self.nodeName = "Getattr";
        self.expr = expr;
        self.attrname = attrname;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        ret = handler.visit(self.attrname, args);
        if ret: self.attrname = ret


# --------------------------------------------------------
class Global:

    def __init__ (self, names, lineno):

        self.nodeName = "Global";
        self.names = names;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.names, args);
        if ret: self.names = ret


# --------------------------------------------------------
class IfExp:

    def __init__ (self, test, then, else_, lineno):

        self.nodeName = "IfExp";
        self.test = test;
        self.then = then;
        self.else_ = else_;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.test, args);
        if ret: self.test = ret
        ret = handler.visit(self.then, args);
        if ret: self.then = ret
        ret = handler.visit(self.else_, args);
        if ret: self.else_ = ret


# --------------------------------------------------------
class If_:

    def __init__ (self, tests, else_, lineno):

        self.nodeName = "If_";
        self.tests = tests;
        self.else_ = else_;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_tests in range(len(self.tests)):

            ret = handler.visit(self.tests[i_tests], args);
            if ret: self.tests[i_tests] = ret

        ret = handler.visit(self.else_, args);
        if ret: self.else_ = ret


# --------------------------------------------------------
class Import_:

    def __init__ (self, names, lineno):

        self.nodeName = "Import_";
        self.names = names;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.names, args);
        if ret: self.names = ret


# --------------------------------------------------------
class Invert:

    def __init__ (self, expr, lineno):

        self.nodeName = "Invert";
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class Keyword:

    def __init__ (self, name, expr, lineno):

        self.nodeName = "Keyword";
        self.name = name;
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.name, args);
        if ret: self.name = ret
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class Lambda:

    def __init__ (self, argnames, defaults, varargs, kwargs, code, lineno):

        self.nodeName = "Lambda";
        self.argnames = argnames;
        self.defaults = defaults;
        self.varargs = varargs;
        self.kwargs = kwargs;
        self.code = code;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.argnames, args);
        if ret: self.argnames = ret
        for i_defaults in range(len(self.defaults)):

            ret = handler.visit(self.defaults[i_defaults], args);
            if ret: self.defaults[i_defaults] = ret

        ret = handler.visit(self.varargs, args);
        if ret: self.varargs = ret
        ret = handler.visit(self.kwargs, args);
        if ret: self.kwargs = ret
        ret = handler.visit(self.code, args);
        if ret: self.code = ret


# --------------------------------------------------------
class LeftShift:

    def __init__ (self, left, right, lineno):

        self.nodeName = "LeftShift";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class List:

    def __init__ (self, nodes, lineno):

        self.nodeName = "List";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class ListComp:

    def __init__ (self, expr, quals, lineno):

        self.nodeName = "ListComp";
        self.expr = expr;
        self.quals = quals;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        for i_quals in range(len(self.quals)):

            ret = handler.visit(self.quals[i_quals], args);
            if ret: self.quals[i_quals] = ret



# --------------------------------------------------------
class ListCompFor:

    def __init__ (self, assign, list, ifs, lineno):

        self.nodeName = "ListCompFor";
        self.assign = assign;
        self.list = list;
        self.ifs = ifs;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.assign, args);
        if ret: self.assign = ret
        ret = handler.visit(self.list, args);
        if ret: self.list = ret
        for i_ifs in range(len(self.ifs)):

            ret = handler.visit(self.ifs[i_ifs], args);
            if ret: self.ifs[i_ifs] = ret



# --------------------------------------------------------
class ListCompIf:

    def __init__ (self, test, lineno):

        self.nodeName = "ListCompIf";
        self.test = test;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.test, args);
        if ret: self.test = ret


# --------------------------------------------------------
class Mod:

    def __init__ (self, left, right, lineno):

        self.nodeName = "Mod";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class Module:

    def __init__ (self, doc, node, lineno):

        self.nodeName = "Module";
        self.doc = doc;
        self.node = node;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.doc, args);
        if ret: self.doc = ret
        ret = handler.visit(self.node, args);
        if ret: self.node = ret


# --------------------------------------------------------
class Mul:

    def __init__ (self, left, right, lineno):

        self.nodeName = "Mul";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class Name:

    def __init__ (self, name, lineno):

        self.nodeName = "Name";
        self.name = name;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.name, args);
        if ret: self.name = ret


# --------------------------------------------------------
class Not:

    def __init__ (self, expr, lineno):

        self.nodeName = "Not";
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class Or:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Or";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Pass:

    def __init__(self, lineno):

        self.nodeName = "Pass";
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        return;


# --------------------------------------------------------
class Power:

    def __init__ (self, left, right, lineno):

        self.nodeName = "Power";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class Print:

    def __init__ (self, nodes, dest, nl, lineno):

        self.nodeName = "Print";
        self.nodes = nodes;
        self.dest = dest;
        self.nl = nl;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret

        ret = handler.visit(self.dest, args);
        if ret: self.dest = ret
        ret = handler.visit(self.nl, args);
        if ret: self.nl = ret


# --------------------------------------------------------
class Raise:

    def __init__ (self, expr1, expr2, expr3, lineno):

        self.nodeName = "Raise";
        self.expr1 = expr1;
        self.expr2 = expr2;
        self.expr3 = expr3;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr1, args);
        if ret: self.expr1 = ret
        ret = handler.visit(self.expr2, args);
        if ret: self.expr2 = ret
        ret = handler.visit(self.expr3, args);
        if ret: self.expr3 = ret


# --------------------------------------------------------
class Return_:

    def __init__ (self, value, lineno):

        self.nodeName = "Return_";
        self.value = value;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.value, args);
        if ret: self.value = ret


# --------------------------------------------------------
class RightShift:

    def __init__ (self, left, right, lineno):

        self.nodeName = "RightShift";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class Slice:

    def __init__ (self, expr, flags, lower, upper, lineno):

        self.nodeName = "Slice";
        self.expr = expr;
        self.flags = flags;
        self.lower = lower;
        self.upper = upper;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        ret = handler.visit(self.flags, args);
        if ret: self.flags = ret
        ret = handler.visit(self.lower, args);
        if ret: self.lower = ret
        ret = handler.visit(self.upper, args);
        if ret: self.upper = ret


# --------------------------------------------------------
class Sliceobj:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Sliceobj";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Stmt:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Stmt";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class Sub:

    def __init__ (self, left, right, lineno):

        self.nodeName = "Sub";
        self.left = left;
        self.right = right;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.left, args);
        if ret: self.left = ret
        ret = handler.visit(self.right, args);
        if ret: self.right = ret


# --------------------------------------------------------
class Subscript:

    def __init__ (self, expr, flags, subs, lineno):

        self.nodeName = "Subscript";
        self.expr = expr;
        self.flags = flags;
        self.subs = subs;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        ret = handler.visit(self.flags, args);
        if ret: self.flags = ret
        for i_subs in range(len(self.subs)):

            ret = handler.visit(self.subs[i_subs], args);
            if ret: self.subs[i_subs] = ret



# --------------------------------------------------------
class TryExcept:

    def __init__ (self, body, handlers, else_, lineno):

        self.nodeName = "TryExcept";
        self.body = body;
        self.handlers = handlers;
        self.else_ = else_;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.body, args);
        if ret: self.body = ret
        for i_handlers in range(len(self.handlers)):

            ret = handler.visit(self.handlers[i_handlers], args);
            if ret: self.handlers[i_handlers] = ret

        ret = handler.visit(self.else_, args);
        if ret: self.else_ = ret


# --------------------------------------------------------
class TryFinally:

    def __init__ (self, body, final_, lineno):

        self.nodeName = "TryFinally";
        self.body = body;
        self.final_ = final_;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.body, args);
        if ret: self.body = ret
        ret = handler.visit(self.final_, args);
        if ret: self.final_ = ret


# --------------------------------------------------------
class Tuple:

    def __init__ (self, nodes, lineno):

        self.nodeName = "Tuple";
        self.nodes = nodes;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        for i_nodes in range(len(self.nodes)):

            ret = handler.visit(self.nodes[i_nodes], args);
            if ret: self.nodes[i_nodes] = ret



# --------------------------------------------------------
class UnaryAdd:

    def __init__ (self, expr, lineno):

        self.nodeName = "UnaryAdd";
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class UnarySub:

    def __init__ (self, expr, lineno):

        self.nodeName = "UnarySub";
        self.expr = expr;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret


# --------------------------------------------------------
class While_:

    def __init__ (self, test, body, else_, lineno):

        self.nodeName = "While_";
        self.test = test;
        self.body = body;
        self.else_ = else_;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.test, args);
        if ret: self.test = ret
        ret = handler.visit(self.body, args);
        if ret: self.body = ret
        ret = handler.visit(self.else_, args);
        if ret: self.else_ = ret


# --------------------------------------------------------
class With_:

    def __init__ (self, expr, vars, body, lineno):

        self.nodeName = "With_";
        self.expr = expr;
        self.vars = vars;
        self.body = body;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.expr, args);
        if ret: self.expr = ret
        ret = handler.visit(self.vars, args);
        if ret: self.vars = ret
        ret = handler.visit(self.body, args);
        if ret: self.body = ret


# --------------------------------------------------------
class Yield_:

    def __init__ (self, value, lineno):

        self.nodeName = "Yield_";
        self.value = value;
        self.lineno = lineno;

    def walkChildren(self, handler, args):
        ret = handler.visit(self.value, args);
        if ret: self.value = ret



